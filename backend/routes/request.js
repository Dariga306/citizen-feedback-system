// backend/routes/request.js
const express = require("express");
const router = express.Router();
const mongoose = require("mongoose");

// –°—Ö–µ–º–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è
const requestSchema = new mongoose.Schema({
  name: String,
  region: String,
  category: String,
  subcategory: String,
  service: String,
  contact: String,
  message: String,
  attachment: String,
  aiResult: Object,
  status: { type: String, default: "–ù–æ–≤–æ–µ" },
  executor: String,
  createdAt: { type: Date, default: Date.now },
});

// –ú–æ–¥–µ–ª—å
const Request = mongoose.model("Request", requestSchema);

// üì• POST ‚Äî –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ
router.post("/", async (req, res) => {
  try {
    const newRequest = new Request(req.body);
    await newRequest.save();
    res.status(201).json({ message: "–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ POST /api/requests:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏" });
  }
});

// üì§ GET ‚Äî –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–±—Ä–∞—â–µ–Ω–∏—è
router.get("/", async (req, res) => {
  try {
    const data = await Request.find().sort({ createdAt: -1 });
    res.json(data);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ GET /api/requests:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏" });
  }
});

// üõ† PATCH ‚Äî –û–±–Ω–æ–≤–∏—Ç—å –ø–æ–ª–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å)
router.patch("/:id", async (req, res) => {
  try {
    await Request.findByIdAndUpdate(req.params.id, req.body);
    res.json({ message: "–û–±–Ω–æ–≤–ª–µ–Ω–æ" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ PATCH /api/requests/:id:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏" });
  }
});

module.exports = router;
